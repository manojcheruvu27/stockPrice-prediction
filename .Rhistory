#' Plots Forecasted values for Time Series Models
#'
#' Borrowed from Drew Schmidt, but modified to fit our aesthetic appeal
#' we create a dataframe with all the appropriate sections (i.e. upper and
#' lower 95% CI bands, forecasted, actual values, the training time series
#' object, and upper and lower 80% CI), the we create a \code{ggplot2} object that
#' reflects the forecasted plot
#'
#' @param forecast forecasted values created using \code{forecast} function
#' @param forc_name name of forecasted method included in title
#' @param color color of the plot, defaults to 'dodgerblue3'
#' @param actual_color color of the actual time series data
#' @param forecast_color color of the forecast time series data
#' @param ts_object_name time series name included in title
#' @param holdout time series object that contains actual values that can be
#' compared to the forecasted values
summary(forecast)
# check residuals
checkresiduals(forecast$residuals)
plot(forecast)
#cm <- caret::confusionMatrix(data = forecast, forecast$type)
#F1_score(cm$table, "lda")
}
ts_forecast_plot_custom <- function(forecast, forc_name, ts_object_name,
color='dodgerblue3', actual_color='olivedrab4', forecast_color='firebrick2',
..., holdout=NaN){
#' Plots Forecasted values for Time Series Models
#'
#' Borrowed from Drew Schmidt, but modified to fit our aesthetic appeal
#' we create a dataframe with all the appropriate sections (i.e. upper and
#' lower 95% CI bands, forecasted, actual values, the training time series
#' object, and upper and lower 80% CI), the we create a \code{ggplot2} object that
#' reflects the forecasted plot
#'
#' @param forecast forecasted values created using \code{forecast} function
#' @param forc_name name of forecasted method included in title
#' @param color color of the plot, defaults to 'dodgerblue3'
#' @param actual_color color of the actual time series data
#' @param forecast_color color of the forecast time series data
#' @param ts_object_name time series name included in title
#' @param holdout time series object that contains actual values that can be
#' compared to the forecasted values
summary(forecast)
# check residuals
checkresiduals(forecast$residuals)
plot(forecast)
# forecast plot colors
default.color <- color
actual.color <- actual_color
forecast.color <- forecast_color
eighty.conf.color <- "orange"
ninety_five.conf.color <- "yellow"
# data wrangling
time <- attr(forecast$x, "tsp")
time <- seq(time[1], attr(forecast$mean, "tsp")[2], by=1/time[3])
lenx <- length(forecast$x)
lenmn <- length(forecast$mean)
df <- data.frame(time=time,
x=c(forecast$x, forecast$mean),
x2=c(forecast$x, rep(NA, lenmn-length(holdout)), holdout),
forecast=c(rep(NA, lenx), forecast$mean),
low1=c(rep(NA, lenx), forecast$lower[, 1]),
upp1=c(rep(NA, lenx), forecast$upper[, 1]),
low2=c(rep(NA, lenx), forecast$lower[, 2]),
upp2=c(rep(NA, lenx), forecast$upper[, 2]),
holdout=c(rep(NA, lenx+lenmn-length(holdout)), holdout)
)
ggplot(df, aes(time, x)) +
geom_ribbon(aes(ymin=low2, ymax=upp2), fill=eighty.conf.color, na.rm=TRUE) +
geom_ribbon(aes(ymin=low1, ymax=upp1), fill=ninety_five.conf.color, na.rm=TRUE) +
geom_line(data=df, aes(time, x2), color="red")+
geom_line(colour = default.color, size = 1) +
geom_line(data=df[!is.na(df$forecast), ], aes(time, forecast), color=forecast.color, na.rm=TRUE) +
geom_line(data=df[!is.na(df$holdout), ], aes(time, holdout), color=actual.color, na.rm=TRUE) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 12)) +
scale_y_continuous("")  +
theme(axis.text.x = element_text(angle = 35, hjust = 1),
panel.background = element_rect(fill = "gray98"),
axis.line.y   = element_line(colour="gray"),
axis.line.x = element_line(colour="gray")) +
labs(x = "Months", y = "log(Closing Values)") +
ggtitle(sprintf('%s Forecast Plot of %s', forc_name, ts_object_name))
}
###########################################################################################
###########################################################################################
# Function: ts_dashboard_plot                                                            #
# Method for Shiny Dashboard                                                             #
###########################################################################################
ts_dashboard_plot <- function(object, ts_object_name, color='dodgerblue3', gof.lag = 10,
conf.int = TRUE,
conf.int.colour = '#0000FF', conf.int.linetype = 'dashed',
conf.int.fill = NULL, conf.int.alpha = 0.3,
ad.colour = '#888888', ad.linetype = 'dashed', ad.size = .2,
nrow = NULL, ncol = 1, ...) {
default.color <- color
rs <- stats::residuals(object)
if (is.null(rs)) {
rs <- object$residuals
}
if (is.null(rs)) {
rs <- object$resid
}
p.std <- ggplot2::autoplot(rs, na.action = stats::na.pass,
ts.colour = default.color, size = 1.05) +
ggplot2::geom_hline(yintercept = 0,
linetype = ad.linetype, size = ad.size,
colour = ad.colour) +
labs(subtitle = '') +
ggplot2::ggtitle(sprintf("Residual Diagnostics for %s \nNon-Standardized Residuals",
ts_object_name))
acfobj <- stats::acf(rs, plot = FALSE, na.action = stats::na.pass)
p.acf <- autoplot(acfobj, conf.int = conf.int,
conf.int.colour = conf.int.colour,
conf.int.linetype = conf.int.linetype,
conf.int.fill = conf.int.fill,
conf.int.alpha = conf.int.alpha,
colour = default.color, size = 1.25)
p.acf <- p.acf + ggplot2::ggtitle('ACF of Residuals')
nlag <- gof.lag
pval <- numeric(nlag)
for (i in 1L:nlag) pval[i] <- stats::Box.test(rs, i, type = "Ljung-Box")$p.value
lb.df <- data.frame(Lag = 1L:nlag, `p value` = pval,
lower = -0.05, upper = 0.05)
# Unnable to create column with space by above expression
colnames(lb.df) <- c('Lag', 'p value', 'lower', 'upper')
p.lb <- ggplot2::ggplot(data = lb.df, mapping = ggplot2::aes_string(x = 'Lag')) +
ggplot2::geom_point(mapping = ggplot2::aes_string(y = '`p value`'), na.rm = TRUE,
colour = default.color) +
ggplot2::scale_y_continuous(limits=c(-0.1, 1)) +
ggplot2::ggtitle('p values for Ljung-Box statistic')
p.lb <- ggfortify:::plot_confint(p = p.lb, data = lb.df, conf.int = conf.int,
conf.int.colour = conf.int.colour,
conf.int.linetype = conf.int.linetype,
conf.int.fill = conf.int.fill, conf.int.alpha = conf.int.alpha)
if (is.null(ncol)) { ncol <- 0 }
if (is.null(nrow)) { nrow <- 0 }
new('ggmultiplot', plots = list(p.std, p.acf, p.lb), nrow = nrow, ncol = ncol)
}
###########################################################################################
###########################################################################################
# Function: ts_forecast_arima                                                            #
# forecast arima                                                                         #
###########################################################################################
ts_forecast_arima <- function(train, test, predict_duration, title, color="dodgerblue3"){
#' Forecasts arima model, returns accuracy
#'
#'
#' @param train time series object with training dataset
#' @param test time series object with testing dataset
#' @param predict_duration the prediction duration (ex: months)
#' @param title tile of the plotting
#' @param color color of the plottting, defaults to "dodgerblue3"
#' @examples
#' data(AirPassengers)
#'
#' air_pass_ts <- as.ts(AirPassengers)
#'
#' ts_forecast_arima(air_pass_train, air_pass_test, 90, 'Air Passengers Data Set')
#'
if (is.ts(train) == FALSE || is.ts(test)  == FALSE){
warning('Make sure object entered is time-series object!')
}
else {
model_train <- auto.arima(train)
train_forecast <- forecast(model_train,h=predict_duration)
#debug(fit_auto_arima)
ts_forecast_plot(train_forecast, "ARIMA", title, color=color,
holdout = fit_test)
ts_dashboard_plot(train_forecast$model, ts_object_name = "ARIMA Model") +
theme(panel.background = element_rect(fill = "gray98"),
panel.grid.minor = element_blank(),
axis.line.y = element_line(colour="gray"),
axis.line.x = element_line(colour="gray"))
#model_test <- Arima(test, model= model_train)
model_test <- auto.arima(test)
test_forecast <- forecast(model_test,h=predict_duration)
accuracy <- accuracy(model_test)
debug(accuracy)
data <- list(test_forecast, accuracy)
names(data) <- c("forecast" , "accuracy")
return(data)
}
}
###########################################################################################
###########################################################################################
# Function: ts_forecast_exp_smoothing                                                     #
# forecast expnential smoothing model                                                     #
###########################################################################################
ts_forecast_exp_smoothing <- function(train, test, predict_duration, title, color="dodgerblue3"){
#' Forecasts exponential smoothing model, returns accuracy
#'
#'
#' @param train time series object with training dataset
#' @param test time series object with testing dataset
#' @param predict_duration prediction duration (ex: months)
#' @param title tile of the plotting
#' @param color color of the plottting, defaults to "dodgerblue3"
#' @examples
#' data(AirPassengers)
#'
#' air_pass_ts <- as.ts(AirPassengers)
#'
#' ts_forecast_exp_smoothing(air_pass_train, air_pass_test, 90, 'Air Passengers Data Set')
#'
if (is.ts(train) == FALSE || is.ts(test)  == FALSE){
warning('Make sure object entered is time-series object!')
}
else {
model_train <- ets(train)
train_forecast <- forecast(model_train, h = predict_duration)
ts_forecast_plot(train_forecast, "Exponential Smoothing", title, color = color, holdout = test)
ts_dashboard_plot(train_forecast$model, ts_object_name = "Exponential Smoothing Model") +
theme(panel.background = element_rect(fill = "gray98"),
panel.grid.minor = element_blank(),
axis.line.y = element_line(colour="gray"),
axis.line.x = element_line(colour="gray"))
model_test <- ets(test, model = model_train)
test_forecast <- forecast(model_test,h=predict_duration)
accuracy <- accuracy(model_test)
debug(accuracy)
data <- list(test_forecast, accuracy)
names(data) <- c("forecast" , "accuracy")
return(data)
}
}
###########################################################################################
###########################################################################################
# Function: ts_forecast_box_cox                                                          #
# forecast Box-Cox model                                                                 #
###########################################################################################
ts_forecast_box_cox <- function(train, test, predict_duration, title, color="dodgerblue3"){
#' Forecasts Box-Cox model
#'
#'
#' @param train time series object with training dataset
#' @param test time series object with testing dataset
#' @param predict_duration prediction duration (ex: months)
#' @param title tile of the plotting
#' @param color color of the plottting, defaults to "dodgerblue3"
#' @examples
#' data(AirPassengers)
#'
#' air_pass_ts <- as.ts(AirPassengers)
#'
#' ts_forecast_box_cox(air_pass_train, air_pass_test, 90, 'Air Passengers Data Set')
#'
if (is.ts(train) == FALSE || is.ts(test)  == FALSE){
warning('Make sure object entered is time-series object!')
}
else {
lambda <- BoxCox.lambda(train)
model_train <- ar(BoxCox(train,lambda))
fit_bc <- forecast(model_train,h=predict_duration,lambda=lambda)
ts_forecast_plot(fit_bc, "Box-Cox Transformation", title, color=color, holdout = test)
ts_dashboard_plot(fit_bc$model, ts_object_name = "Box-Cox Transformation Model") +
theme(panel.background = element_rect(fill = "gray98"),
panel.grid.minor = element_blank(),
axis.line.y = element_line(colour="gray"),
axis.line.x = element_line(colour="gray"))
#model_test <- ar(BoxCox(test, BoxCox.lambda(test)))
accuracy <- accuracy(model_train)
print(accuracy)
#accuracy <- round(accuracy[1,2], 3)
debug(accuracy)
return(accuracy)
}
}
###########################################################################################
###########################################################################################
# Function: ts_forecast_naive                                                           #
# forecast Naive Model                                                                   #
###########################################################################################
ts_forecast_naive <- function(train, test, predict_duration, title, color="dodgerblue3"){
#' Forecasts Seasonal Naive model, returns accuracy
#'
#'
#' @param train time series object with training dataset
#' @param test time series object with testing dataset
#' @param predict_duration prediction duration (ex: months)
#' @param title tile of the plotting
#'  @param color color of the plottting, defaults to "dodgerblue3"
#'
#' @examples
#' data(AirPassengers)
#'
#' air_pass_ts <- as.ts(AirPassengers)
#'
#' ts_forecast_naive(air_pass_train, air_pass_test, 90, 'Air Passengers Data Set')
#'
if (is.ts(train) == FALSE || is.ts(test) == FALSE){
warning('Make sure object entered is time-series object!')
}
else {
model_train <- naive(train, h = predict_duration)
ts_forecast_plot(model_train, "Naive", title, color, holdout = test)
ts_dashboard_plot(model_train, ts_object_name = "Naive Forecast Model") +
theme(panel.background = element_rect(fill = "gray98"),
panel.grid.minor = element_blank(),
axis.line.y = element_line(colour="gray"),
axis.line.x = element_line(colour="gray"))
model_test <- naive(test, h = predict_duration)
test_forecast <- forecast(model_test,h=predict_duration)
accuracy <- accuracy(model_test)
debug(accuracy)
data <- list(test_forecast, accuracy)
names(data) <- c("forecast" , "accuracy")
return(data)
}
}
###########################################################################################
###########################################################################################
# Function: ts_forecast_seasonal_naive                                                  #
# forecast Seasonal Naive Model                                                          #
###########################################################################################
ts_forecast_seasonal_naive <- function(train, test, predict_duration, title, color="dodgerblue3"){
#' Forecasts Seasonal Naive model, returns accuracy
#'
#'
#' @param train time series object with training dataset
#' @param test time series object with testing dataset
#' @param predict_duration prediction duration (ex: months)
#' @param title tile of the plotting
#' @param color color of the plottting, defaults to "dodgerblue3"
#' @examples
#' data(AirPassengers)
#'
#' air_pass_ts <- as.ts(AirPassengers)
#'
#' ts_forecast_seasonal_naive(air_pass_train, air_pass_test,90, 'Air Passengers Data Set')
#'
if (is.ts(train) == FALSE || is.ts(test) == FALSE){
warning('Make sure object entered is time-series object!')
}
else {
model_train <- snaive(train, h = predict_duration)
ts_forecast_plot(model_train, "Seasonal Naive Forecast", title, color=color, holdout = test)
ts_dashboard_plot(model_train, ts_object_name = "Seasonal Naive Forecast Model") +
theme(panel.background = element_rect(fill = "gray98"),
panel.grid.minor = element_blank(),
axis.line.y = element_line(colour="gray"),
axis.line.x = element_line(colour="gray"))
model_test <- snaive(test, h = predict_duration)
test_forecast <- forecast(model_test,h=predict_duration)
accuracy <- accuracy(model_test)
debug(accuracy)
data <- list(test_forecast, accuracy)
names(data) <- c("forecast" , "accuracy")
return(data)
}
}
###########################################################################################
###########################################################################################
# Function: ts_forecast_neural_net                                                       #
# forecast neural network model                                                           #
###########################################################################################
ts_forecast_neural_net <- function(train, test, predict_duration, title, color="dodgerblue3"){
#' Forecasts neural network model, returns accuracy
#'
#'
#' @param train time series object with training dataset
#' @param test time series object with testing dataset
#' @param predict_duration prediction duration (ex: months)
#' @param title tile of the plotting
#' @param color color of the plottting, defaults to "dodgerblue3"
#' @examples
#' data(AirPassengers)
#'
#' air_pass_ts <- as.ts(AirPassengers)
#'
#' ts_forecast_neural_net(air_pass_train, air_pass_test, 90, 'Air Passengers Data Set')
#'
if (is.ts(train) == FALSE || is.ts(test)  == FALSE){
warning('Make sure object entered is time-series object!')
}
else {
lambda <- BoxCox.lambda(train)
model_train <- nnetar(train, lambda = lambda) # Using BC lambda
fit_net <- forecast(model_train, h = predict_duration, PI = TRUE)
ts_forecast_plot(fit_net, "Neural Network", color = color, title, holdout = test)
ts_dashboard_plot(fit_net, ts_object_name = "Neural Networks Model") +
theme(panel.background = element_rect(fill = "gray98"),
panel.grid.minor = element_blank(),
axis.line.y = element_line(colour="gray"),
axis.line.x = element_line(colour="gray"))
model_test <- nnetar(test, model=model_train)
test_forecast <- forecast(model_test,h=predict_duration)
accuracy <- accuracy(model_test)
debug(accuracy)
data <- list(test_forecast, accuracy)
names(data) <- c("forecast" , "accuracy")
return(data)
}
}
###########################################################################################
debug <- function(x) {
print(x)
flush.console()
}
####################################################################################
#Project: Minor Project
#File: stock_returns.r
#Purpose: R program to predict stock returns for a given stock symbol using various time-series and ML models
#Author: Manoj Cheruvu
#Student Id:
#College:
####################################################################################
####################################################################################
#Step 1: install/load the referrenced packages
####################################################################################
#all the library methods are in time_series_lib.r, load it into memory if not already loaded
if(!exists("ts_plot", mode="function")) source('time_series_lib.r')
#install.packages(c("caret", "recipes", "klaR", "ipred"))
#install.packages("Rcpp")
#install.packages("rmarkdown")
#install.packages("knitr")
#list of packages to be installed and referenced
packages =  c("timeSeries","forecast", "xts", "zoo", "timeDate", "tseries",
"quantmod", "lubridate","ggfortify", "assertthat",
"ggplot2", "dplyr", "tidyr", "data.table",
"corrplot", "gridExtra","TSA", "tsibble", "docstring", "readr", "here",
"DT", "plotly")
ts_install_and_ref_packages(packages)
####################################################################################
#Step 2: get cached locally into data folder or get the new dataset with given stock symbol for the given date range
#data source: Yahoo Finance - https://finance.yahoo.com/
#the resulted object is time-series dataset/object
####################################################################################
symbol <- "AAPL"
symbol_title <- "Apple Stock Prices"
predict_months <- 3
toDate <- Sys.Date()
years <- 3
#total N years worth monthly data
fromDate <- toDate %m-% months(12*years)
print(fromDate)
print(toDate)
raw_stock_ts <- ts_get_sample_stock_data(symbol, fromDate, toDate,  periodicity = "monthly")
print('data is saved for future use and loaded into memory')
#analyse the time-series object
head(raw_stock_ts)
summary(raw_stock_ts)
str(raw_stock_ts)
####################################################################################
#Step 3: clean and transform the time-series dataset
####################################################################################
stock_ts <- ts_clean_and_transform(raw_stock_ts)
#stock_ts = raw_stock_ts
####################################################################################
#Step 4: Exploratory Data Analysis (EDA)
####################################################################################
# plot time series object
ts_plot(stock_ts, symbol_title)
# ACF and PACF
ts_auto_correlate(stock_ts, paste0('Log ', symbol_title))
# Conduct ADF test on log returns series
print(adf.test(stock_ts))
ts_decomp(stock_ts, symbol_title)
ts_seasonal(stock_ts, symbol_title)
####################################################################################
#Step 5: Split the dataset into training and testing by 80%-20%
####################################################################################
split_data_ts <- ts_split_train_and_test(stock_ts, ratio=0.8)
train_ts <- split_data_ts$train
test_ts <- split_data_ts$test
print(str(train_ts))
print(str(test_ts))
print(month.abb[cycle(train_ts)])
stock_df <- data.frame(stock_ts)
head(stock_df)
print(paste0('total dataset rows: ', nrow(stock_df)))
train_df <- data.frame(train_ts)
head(train_df)
print(paste0('train dataset rows: ', nrow(train_df)))
test_df <- data.frame(test_ts)
head(test_df)
print(paste0('test dataset rows: ', nrow(test_df)))
####################################################################################
#Step 6: Model the predictions using various algorithms
####################################################################################
arima <- ts_forecast_arima(train_ts, test_ts, predict_months, paste(symbol_title, "ARIMA Forecast", sep=" "))
exp_smoothing <- ts_forecast_exp_smoothing(train_ts, test_ts, predict_months, paste(symbol_title, "Exp Smooth", sep=" "))
#boxcox <- ts_forecast_box_cox(train_ts, test_ts, predict_months, paste(symbol_title, "Box-Cox Forecast", sep=" "))
naive <- ts_forecast_naive(train_ts, test_ts, predict_months, paste(symbol_title, "Naive Forecast", sep=" "))
snaive <- ts_forecast_seasonal_naive(train_ts, test_ts, predict_months, paste(symbol_title, "Seasonal Naive Forecast", sep=" "))
nnet <- ts_forecast_neural_net(train_ts, test_ts, predict_months, paste(symbol_title, "Neural Network Forecast", sep=" "))
####################################################################################
#Step 7: Compare algorithm accuracies
#refer: https://otexts.com/fpp2/accuracy.html
####################################################################################
result <- data.frame(Forecast = character(), ME=double(),
RMSE=double(),MAE=double(),
MPE=double(), MAPE=double(),
MASE=double(), ACF1=double())
result$Forecast <- as.character(result$Forecast)
result[nrow(result) + 1,] <- append(list(Forecast = "ARIMA"), arima$accuracy)
result[nrow(result) + 1,] <- append(list(Forecast = "Exponential Smoothing"), exp_smoothing$accuracy)
#result[nrow(result) + 1,] <- append(list(Forecast = "Box-Cox"), accuracy_boxcox)
result[nrow(result) + 1,] <- append(list(Forecast = " Naive Forecast"),naive$accuracy)
result[nrow(result) + 1,] <- append(list(Forecast = "Seasonal Naive Forecast"), snaive$accuracy)
result[nrow(result) + 1,] <- append(list(Forecast = "Neural Network"), nnet$accuracy)
head(result[order(result$RMSE),], 5)
#print forecast values
print('Arima Forecast: ')
print(arima$forecast)
print('Exponential Smoothing Forecast: ')
print(exp_smoothing$forecast)
print('Naive Forecast: ')
print(naive$forecast)
#print('Seasonal Naive Forecast: ')
print(snaive$forecast)
#print('Neural Net Forecast: ')
print(nnet$forecast)
